.TH PAK "1" "March 2014" "pak" "User Commands"
.SH NAME
pak \- Embedthis Pak -- Package Manager
.SH SYNOPSIS
.B pak 
    \fB--all\fR
    \fB--catalog catalog\fR
    \fB--cache dir\fR
    \fB--details\fR
    \fB--dir dir\fR
    \fB--force\fR
    \fB--log file:level\fR
    \fB--nodeps\fR
    \fB--paks dir\fR
    \fB--quiet\fR
    \fB--silent\fR
    \fB--verbose\fR
    \fB--versions\fR 
    \fBcommands ...\fB
.SH ""
.B Commands:
    cache paks...
    cached paks...
    config
    depend paks...
    edit key[=value]
    help
    init [name [version]]
    install paks...
    list paks...
    lockdown    
    prune paks...
    publish [name uri pass]
    retract name [password]
    search paks...
    uninstall paks...
    update paks...
    upgrade paks...
.RE
.SH DESCRIPTION
\fBPak\fR is a simple package manager of components for embedded applications. 
It makes it easy to retrieve, integrate and manage components for applications. Pak focusses on embedded applications using Appweb, ESP and EJS. It provides tested, integrated componens that work together. It is not intended as a generic package manager to install complete applications.
.PP
Pak calls packages "paks". This is not a misspelling. 

.PP
.SH WHY PAK?
Existing package managers like Bower are excellent, but the published components are typically tuned for enterprise
environments and not for embedded use. There are many files not necessary on smaller embedded systems and they are not
integrated together. Pak focusses on the embedded ESP web framework and offers components specificially tailored and
integrated for this environment.
.PP 

.SH FEATURES
Pak is implemented primarily as a single script of some 2K lines and is very hackable. 
It has the following major features:

    . Install, list and uninstall packages into a local application
    . Manages a local cache of retrieved packages
    . Provides a global catalog to search for public paks
    . Easy upgrading paks when new versions become available
    . Automatically retrieves and installs dependant paks
    . Supports the CommonJS package standard
    . Supports the SemVer package versioning standard
    . Supports using GitHub as the primary pak storage repository

.SH NICE PARTS
While Pak has a strong feature set, there are some characteristics that make Pak particularly sweet.

    . Fast, fast, fast
    . Local cache of paks supports fast offline use
    . Share paks by publishing to a common public catalog
    . Catalog web portal to search published paks
    . Pak integrates with the Bower repository to seamlessly download Bower components
    . Package.json is compatible with nodejs.

.PP
.SH BASIC USAGE
.PP
To install paks:
    pak install Names...

To uninstall 
    pak uninstall Names...

To list installed paks
    pak list

To display pak dependencies
    pak depend
    
To show what paks are present in the cache
    pak cached

To download and cache a pak but not install in the local directory
    pak cache Name

To prune old versions from the cache
    pak prune

.PP
.SH OVERVIEW
A pak is described by a CommonJS package.json file. This provides at a minimum the following properties.
.PP
.RS 5
{
    "name": "Package name - one word"
    "description": "Package description - one line"
    "version": "1.2.3",
    "keywords": [
        "comms", "websockets", "sockets", "ssl",
    ],
    "author": {
        "name": "Your name",
        "email": "Your email",
        "url": "Your web site"
    },
    "bugs": {
        "email": "name@example.com",
        "url": "http://example.com/bugs"
    },
    "license": "GPL",
    "dependencies": {
        "name": "version"
    }
}
.RE
.PP
For more details, see:
    http://package.json.nodejitsu.com
    http://wiki.commonjs.org/wiki/Packages/1.1
    https://npmjs.org/doc/json.html


.SH RUNNING
To run Pak with more verbose trace output, use the --verbose switch. To run with less trace, use the --quiet switch.
To run completely silently except for hard-errors, use --silent.

.SH PUBLISHING
To publish a new pak, create a package.json and then run pak inside the directory of the pak to be published:

    pak publish NAME REPOSITORY PASSWORD

Where NAME is the name of pak, REPOSITORY is the GitHub endpoint of the package and PASSWORD is the password to associate
with the pak. You will need this password to modify or retract the pak in the future. Safeguard it well.

.SH CONFIGURATION
On startup, Pak reads configuration from a pakrc file. This file defines the operational configuration for Pak. For example:
 {
    "catalogs": [
        "http://localhost:5000/do/pak",
        "https://bower.herokuapp.com/packages",
    ],
    "dirs": {
        "paks": "paks",
        "pakcache": "~/.paks",
    },
 }

The "catalogs" property defines sites that index and catalog packs. The "paks" directory is the name of the local
directory in which to store paks. The "pakcache" directory defines where to cache paks on the local system.
.PP
Pak locates a valid pakrc file by searching in order:

    pakrc, .pakrc, ../pakrc, ../.pakrc, /etc/pakrc, package.json 

.SH COMMANDS

.TP 
cache [paks...]
Populate the cache with paks
.TP
cached [paks...]         
List paks in the cache
.TP
config                   
Show the Pak configuration
.TP
depend [paks...]         
Display installed pak dependencies
.TP
edit key[=value]...      
Edit a pak description file
.TP
help ...
Display this usage help
.TP
info paks...             
Display README for a pak
.TP
init [name [version]]    
Create a new package.json
.TP
install paks...          
Install a pak on the local system. The pak name can be a name in the Pak online catalog or it can be a GitHub endpoint
URL or of the form 'account/repositiory'.  
.TP
list [paks...]           
list installed paks
.TP
lockdown
Lockdown the version criteria for all dependencies. This rewrites the
package.json to define a compatible version expression for all installed
dependencies.
.TP
.TP
prune [paks...]          
Prune named paks
.TP
publish name endpoint password
publish a pak in a catalog
.TP
retract name [pass]      
Unpublish a pak
.TP
search paks...           
Search for paks in the catalog
.TP
uninstall                
Uninstall a pak on the local system
.TP
update [paks...]         
Update the pak cache with latest version
.TP
upgrade [paks...]        
Upgrade installed paks

.SH OPTIONS
.TP
\fB\--all URI\fR
Show all versions of a pak.

.TP
\fB\--cache directory\fR
Specify the directory to use for the paks cache. This overrides the values specified in the various pakrc 
or package.json files.

.TP
\fB\--catalog URI\fR
Set the catalog URI to use for install, cache, publish and retract commands.

.TP
\fB\--details URI\fR
Show more pak details. Useful with pak list.

.TP
\fB\--dir directory\fR
Change to the given directory before running.

.TP
\fB\--force\fR
Force the command to continue. This is useful to install or cache a pak when dependencies cannot be satisfied.
It is also useful to cache or install an already cached/installed pack. Aliased as -f.

.TP
\fB\--log logName[:logLevel]\fR
Specify a file to log internal execution messages. Bit will log execution related trace to the log file. The log level
specifies the desired verbosity of output. Level 0 is the least verbose and level 9 is the most. The '-v' switch is
an alias for '--log stderr:2'.

.TP
\fB\--nodeps\fR
Used to suppress installing or upgrading dependent packages.

.TP
\fB\--paks directory\fR
Specify the directory to use for the paks. This overrides the values specified in the various pakrc 
or package.json files.

.TP
\fB\--quiet\fR
Run in quiet mode with less verbose otuput. Aliased as -q.

.TP
\fB\--silent\fR
Run in silent mode suppressing all but hard errors. Aliased as -s.

.TP
\fB\--versions URI\fR
Show pak version information.

.PP
.SH "REPORTING BUGS"
Report bugs to dev@embedthis.com.
.SH COPYRIGHT
Copyright \(co 2004-2014 Embedthis Software. Bit and Ejscript are a trademarks of Embedthis Software.
.br
.SH "SEE ALSO"
http://embedthis.com/pak/
